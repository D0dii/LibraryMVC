@model X.PagedList.IPagedList<LibraryMVC.Models.Book>
@using X.PagedList.Mvc.Core;
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
@using (Html.BeginForm("Index","Books",FormMethod.Get))
{
    <p>
        Find a book: @Html.TextBox("SearchString",ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" class="btn btn-primary"/>
    </p>
}
<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Author", "Index", new { sortOrder = ViewBag.AuthorSortParm, currentFilter = ViewBag.CurrentFilter})
        </th>
        <th>
            @Html.ActionLink("Title", "Index", new { sortOrder = ViewBag.TitleSortParm, currentFilter = ViewBag.CurrentFilter})
        </th>
        <th>
            Year of Production
        </th>
        <th></th>
    </tr>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Author)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.YearOfProduction)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.isAvaible)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))